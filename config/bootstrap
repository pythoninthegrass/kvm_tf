#!/usr/bin/env bash

# set -euo pipefail

# trap 2, 3, 15 signals
trap 'exit' SIGINT SIGQUIT SIGTERM

cat << 'DESCRIPTION' >/dev/null
Standalone script to create a new Ubuntu 24.04 VM using cloud-init.

Tests cloud-init configurations locally before deploying via the libvirt terraform provider.
DESCRIPTION

# environment variables
IMG_NAME="noble-server-cloudimg-amd64.img"
CODE_NAME="${IMG_NAME%-server-cloudimg-amd64.img}"
IMG_URL="https://cloud-images.ubuntu.com/${CODE_NAME}/current/${IMG_NAME}"
IMG_LOCATION="/tmp/${IMG_NAME}"
VM_NAME="ubuntu-24.04"
LIBVIRT_DISK_PATH="/var/lib/libvirt/images/${VM_NAME}-resource-pool"
VM_IMAGE="${LIBVIRT_DISK_PATH}/${VM_NAME}.qcow2"
CLOUD_INIT_ISO="${LIBVIRT_DISK_PATH}/cloud-init.iso"
IMG_SIZE="10G"
VM_CPU=1
VM_MEM=1024
OS_VARIANT="ubuntu24.04"    # check with `virt-install --os-variant list | grep ubuntu`
USER_DATA="cloud_init.yml"
NETWORK_CONFIG="network_config.yml"

# verify if the script is run as root
if [ "$(id -u)" -ne 0 ]; then
	echo "Error: This script must be run as root."
	exit 1
fi

# check that the required tools are installed
check_deps() {
	local deps=(cloud-localds jq qemu-img virt-install)
	local missing=()
	local need_extra_utils=false

	for dep in "${deps[@]}"; do
		command -v "$dep" >/dev/null 2>&1 || missing+=("$dep")
	done

	[ ${#missing[@]} -eq 0 ] && return 0

	echo "Error: Required tool(s) not found: ${missing[*]}"

	. /etc/os-release 2>/dev/null
	case "$ID" in
		ubuntu|debian) cmd="apt-file search --package-only" ;;
		rhel|centos|fedora) cmd="$(command -v dnf || echo yum) provides" ;;
		*) echo "Unsupported distribution: $ID"; exit 1 ;;
	esac

	for dep in "${missing[@]}"; do
		pkg=$($cmd "*/$dep" 2>/dev/null | grep -v '^Last metadata' | head -1 | awk '{print $1}' | rev | cut -d- -f2- | rev)
		if [ -z "$pkg" ]; then
			echo "$dep: not found"
			[[ "$cmd" = *"dnf"* ]] || [[ "$cmd" = *"yum"* ]] && need_extra_utils=true
		else
			echo "$dep: $pkg"
		fi
	done

	$need_extra_utils && echo "Note: You may need to install dnf-plugins-core or yum-utils."

	exit 1
}

# create the libvirt disk path if it does not exist
if [ ! -d "$LIBVIRT_DISK_PATH" ]; then
	mkdir -p "$LIBVIRT_DISK_PATH"
fi

# check if cloud-init files exist
if [ ! -f "$USER_DATA" ] || [ ! -f "$NETWORK_CONFIG" ]; then
	echo "Error: cloud_init.yml or network_config.yml not found in the current directory."
	exit 1
fi

# download ubuntu 24.04 cloud image if not present
if [ ! -f "${IMG_LOCATION}" ]; then
	echo "Downloading Ubuntu 24.04 cloud image..."
	wget "$IMG_URL" -O "${IMG_LOCATION}"
fi

# create a new disk image
create_img() {
	local backing_file
	local backing_fmt

	backing_file="$IMG_LOCATION"
	backing_fmt=$(qemu-img info --output=json "$backing_file" | jq -r '.format')

	echo "Creating new disk image..."

	qemu-img create \
		-f qcow2 \
		-o backing_file="$backing_file",backing_fmt="$backing_fmt" \
		"$VM_IMAGE" \
		"$IMG_SIZE"
}

# generate cloud-init iso
gen_cloud_init_iso() {
	echo "Generating cloud-init iso..."
	cloud-localds -v \
		--network-config="$NETWORK_CONFIG" \
		"$CLOUD_INIT_ISO" \
		"$USER_DATA"
}

# check if the vm exists
check_vm() {
	if virsh dominfo "$VM_NAME" >/dev/null 2>&1; then
		echo "Error: VM $VM_NAME already exists."
		return 1
	else
		return 0
	fi
}

# launch the vm
launch_vm() {
	echo "Creating and starting VM $VM_NAME..."
	if virt-install \
		--name "$VM_NAME" \
		--vcpus $VM_CPU \
		--memory $VM_MEM \
		--disk "$VM_IMAGE",device=disk,bus=virtio \
		--disk "$CLOUD_INIT_ISO",device=cdrom \
		--os-variant "$OS_VARIANT" \
		--virt-type kvm \
		--graphics none \
		--network network=default,model=virtio \
		--import \
		--noautoconsole
	then
		echo "VM $VM_NAME has been created and started."
		echo "You can connect to the VM using the following command:"
		echo "sudo virsh console $VM_NAME"
	else
		echo "Error: VM $VM_NAME could not be created."
		return 1
	fi
}

# destroy the vm
destroy_vm() {
	echo "Destroying VM $VM_NAME..."
	virsh shutdown "$VM_NAME" >/dev/null 2>&1
	virsh undefine "$VM_NAME" \
	&& rm -rf "$LIBVIRT_DISK_PATH"
	if [ $? -ne 0 ]; then
		echo "Error: VM $VM_NAME could not be destroyed."
		exit 1
	else
		echo "VM $VM_NAME has been destroyed."
		exit 0
	fi
}

main() {
	check_deps
	[ $# -eq 1 ] && [ "$1" == "destroy" ] && destroy_vm
	check_vm
	create_img
	gen_cloud_init_iso
	launch_vm
}
main "$@"

exit 0
